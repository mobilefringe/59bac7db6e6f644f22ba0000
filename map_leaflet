
<style>
   .map_container {
       height: 1000px;
        width: 1000px;
        margin:auto;
   }
    #map {
        /*position: absolute;*/
        height: 100%;
        width: 100%;
        margin:auto;
        background-color: #fffff0;
        overflow:hidden;
    }
    /*.leaflet-tile.leaflet-tile-loaded {*/
    /*    width:100%!important;*/
    /*    transform: initial!important;*/
        
    /*}*/
</style>
    <!-- Base libraries-->
    <script src="http://www.sumbera.com/gist/js/leaflet/svg/scaled/d3-3.5.5.min.js"></script>
    <script src="http://www.sumbera.com/gist/js/leaflet/svg/scaled/leaflet.js"></script>
    <script src="http://assets.codecloudapp.com/sites/59bac7db6e6f644f22ba0000/text/javascript/1505852644000/L.SvgScaleOverlay.js"></script>
    <script src="http://www.sumbera.com/gist/data.js" charset="utf-8"></script>
    <div class="map_container">
        <div id="map">
        <svg  id="map" ></svg>
        </div>
    </div>
    
    <div id="tooltip" style="width:500px; height:250px;">
     </div>


    <script>
        
        var map = L.map('map', {
            crs: L.CRS.Simple,
            // center: [500, 500]
        });
        var bounds =[[0,0], [1500,1500]];// [[0,0], [500,500]];
var overlay = L.imageOverlay('//mallmaverick.cdn.speedyrails.net/system/properties/svgmaps/000/000/028/original/Londonderry_DB_4.svg?1497642416', bounds).addTo(map);
map.fitBounds(bounds);
// const overlay = L.imageOverlay('maps/map.svg', [[0, 0], [-height, width]]).addTo(this.map);

// Super-janky way of replacing the SVG <img> tag with an <object> tag that embeds it.
const layers = overlay._image.parentNode;
overlay._image.parentNode.removeChild(overlay._image);
const obj = document.createElement('object');
obj.data = overlay._url;
obj.type = 'image/svg+xml';
overlay._image.classList.forEach(c => obj.classList.add(c));
obj.setAttribute('style', overlay._image.getAttribute('style'));
layers.appendChild(obj);
overlay._image = obj;

// In Chrome, the object tag needs to be redrawn after a zoom for some reason.
// This causes an unfortunate one-frame flicker.
if (L.Browser.chrome) {
  this.map.on('zoomend', () => {
    overlay._image.style.display = 'none';
    overlay._image.style.display = 'block';
  });
}
          
            
       show_content();
    </script>
    